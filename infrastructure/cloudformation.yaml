AWSTemplateFormatVersion: '2010-09-09'
Description: 'CloudFormation template for Crop Health Prediction System'

Parameters:
  EnvironmentName:
    Description: Environment name (dev/staging/prod)
    Type: String
    Default: dev
    AllowedValues: [dev, staging, prod]

  ProjectName:
    Description: Project name used for resource naming
    Type: String
    Default: crop-health

  ModelBucketName:
    Description: Name of the S3 bucket for model storage
    Type: String
    Default: crop-health-models-${AWS::AccountId}-${AWS::Region}

  DataBucketName:
    Description: Name of the S3 bucket for image storage
    Type: String
    Default: crop-health-images-${AWS::AccountId}-${AWS::Region}

  SageMakerInstanceType:
    Description: SageMaker instance type for the endpoint
    Type: String
    Default: ml.m5.large
    AllowedValues: [ml.m5.large, ml.m5.xlarge, ml.m5.2xlarge]

Resources:
  # S3 Buckets
  ModelBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${ModelBucketName}
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: CleanupOldModels
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 15

  DataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${DataBucketName}
      AccessControl: Private
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ["*"]
            MaxAge: 3000

  # DynamoDB Table
  PredictionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${ProjectName}-predictions-${EnvironmentName}
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: prediction_id
          AttributeType: S
        - AttributeName: timestamp
          AttributeType: N
      KeySchema:
        - AttributeName: prediction_id
          KeyType: HASH
        - AttributeName: timestamp
          KeyType: RANGE
      TimeToLiveSpecification:
        AttributeName: expiry_time
        Enabled: true

  # IAM Roles
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: [lambda.amazonaws.com]
            Action: ['sts:AssumeRole']
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CropHealthLambdaPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:ListBucket'
                Resource:
                  - !Sub 'arn:aws:s3:::${ModelBucket}'
                  - !Sub 'arn:aws:s3:::${ModelBucket}/*'
                  - !Sub 'arn:aws:s3:::${DataBucket}'
                  - !Sub 'arn:aws:s3:::${DataBucket}/*'
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource: !GetAtt PredictionsTable.Arn
              - Effect: Allow
                Action: 'sagemaker:InvokeEndpoint'
                Resource: !Sub 'arn:aws:sagemaker:${AWS::Region}:${AWS::AccountId}:endpoint/*'

  # Lambda Functions
  PredictionLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-predict-${EnvironmentName}
      Description: Handles prediction requests
      Runtime: python3.9
      Handler: lambda_function.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Sub ${ProjectName}-lambda-code-${AWS::AccountId}
        S3Key: !Sub '${EnvironmentName}/predict-lambda.zip'
      Environment:
        Variables:
          MODEL_BUCKET: !Ref ModelBucket
          DATA_BUCKET: !Ref DataBucket
          TABLE_NAME: !Ref PredictionsTable
      Timeout: 30
      MemorySize: 512

  # API Gateway
  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub ${ProjectName}-api-${EnvironmentName}
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins: ['*']
        AllowMethods: ['GET', 'POST', 'OPTIONS']
        AllowHeaders: ['Content-Type', 'Authorization']
        MaxAge: 300

  ApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref ApiGateway
      StageName: !Ref EnvironmentName
      AutoDeploy: true

  # API Gateway Integration with Lambda
  ApiLambdaIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref ApiGateway
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PredictionLambda.Arn}/invocations'
      PayloadFormatVersion: '2.0'

  # API Routes
  PredictRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref ApiGateway
      RouteKey: 'POST /predict'
      Target: !Sub 'integrations/${ApiLambdaIntegration}'

  # Lambda Permissions
  LambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt PredictionLambda.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/*/predict'

  # CloudFront Distribution
  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: 'index.html'
        Origins:
          - DomainName: !GetAtt DataBucket.DomainName
            Id: S3Origin
            S3OriginConfig:
              OriginAccessIdentity: ''  # For S3 website hosting
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

  # Outputs
Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub 'https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${EnvironmentName}'
  
  FrontendUrl:
    Description: CloudFront distribution URL
    Value: !GetAtt CloudFrontDistribution.DomainName
    
  ModelBucketName:
    Description: S3 bucket for model storage
    Value: !Ref ModelBucket
    
  DataBucketName:
    Description: S3 bucket for image storage
    Value: !Ref DataBucket
    
  PredictionsTableName:
    Description: DynamoDB table for prediction logs
    Value: !Ref PredictionsTable
